/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package ai.whylabs.WhyLabs.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * UserApiKey - Response when creating an API key successfully
 */
public class UserApiKey {
    /**
     * Human-readable alias for the key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alias")
    public String alias;

    public UserApiKey withAlias(String alias) {
        this.alias = alias;
        return this;
    }
    
    /**
     * Creation time in human readable format
     */
    @JsonProperty("creationTime")
    public String creationTime;

    public UserApiKey withCreationTime(String creationTime) {
        this.creationTime = creationTime;
        return this;
    }
    
    /**
     * Expiration time in human readable format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expirationTime")
    public String expirationTime;

    public UserApiKey withExpirationTime(String expirationTime) {
        this.expirationTime = expirationTime;
        return this;
    }
    
    /**
     * The full value of the key. This is not persisted in the system
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;

    public UserApiKey withKey(String key) {
        this.key = key;
        return this;
    }
    
    /**
     * The key id. Can be used to identify keys for a given user
     */
    @JsonProperty("keyId")
    public String keyId;

    public UserApiKey withKeyId(String keyId) {
        this.keyId = keyId;
        return this;
    }
    
    /**
     * The organization that the key belongs to
     */
    @JsonProperty("orgId")
    public String orgId;

    public UserApiKey withOrgId(String orgId) {
        this.orgId = orgId;
        return this;
    }
    
    /**
     * Whether the key has been revoked
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revoked")
    public Boolean revoked;

    public UserApiKey withRevoked(Boolean revoked) {
        this.revoked = revoked;
        return this;
    }
    
    /**
     * Scope of the key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    public String[] scopes;

    public UserApiKey withScopes(String[] scopes) {
        this.scopes = scopes;
        return this;
    }
    
    /**
     * The user that the key represents
     */
    @JsonProperty("userId")
    public String userId;

    public UserApiKey withUserId(String userId) {
        this.userId = userId;
        return this;
    }
    
    public UserApiKey(@JsonProperty("creationTime") String creationTime, @JsonProperty("keyId") String keyId, @JsonProperty("orgId") String orgId, @JsonProperty("userId") String userId) {
        this.creationTime = creationTime;
        this.keyId = keyId;
        this.orgId = orgId;
        this.userId = userId;
  }
}
