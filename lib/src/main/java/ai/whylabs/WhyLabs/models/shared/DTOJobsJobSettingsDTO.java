/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package ai.whylabs.WhyLabs.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

public class DTOJobsJobSettingsDTO {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emailNotifications")
    public DTOJobsJobEmailNotificationsDTO emailNotifications;

    public DTOJobsJobSettingsDTO withEmailNotifications(DTOJobsJobEmailNotificationsDTO emailNotifications) {
        this.emailNotifications = emailNotifications;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("existingClusterId")
    public String existingClusterId;

    public DTOJobsJobSettingsDTO withExistingClusterId(String existingClusterId) {
        this.existingClusterId = existingClusterId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("libraries")
    public java.util.Map<String, Object>[] libraries;

    public DTOJobsJobSettingsDTO withLibraries(java.util.Map<String, Object>[] libraries) {
        this.libraries = libraries;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxConcurrentRuns")
    public Integer maxConcurrentRuns;

    public DTOJobsJobSettingsDTO withMaxConcurrentRuns(Integer maxConcurrentRuns) {
        this.maxConcurrentRuns = maxConcurrentRuns;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("maxRetries")
    public Integer maxRetries;

    public DTOJobsJobSettingsDTO withMaxRetries(Integer maxRetries) {
        this.maxRetries = maxRetries;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("minRetryIntervalMillis")
    public Long minRetryIntervalMillis;

    public DTOJobsJobSettingsDTO withMinRetryIntervalMillis(Long minRetryIntervalMillis) {
        this.minRetryIntervalMillis = minRetryIntervalMillis;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public DTOJobsJobSettingsDTO withName(String name) {
        this.name = name;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("newCluster")
    public DTOJobsNewClusterDTO newCluster;

    public DTOJobsJobSettingsDTO withNewCluster(DTOJobsNewClusterDTO newCluster) {
        this.newCluster = newCluster;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notebookTask")
    public DTOJobsNotebookTaskDTO notebookTask;

    public DTOJobsJobSettingsDTO withNotebookTask(DTOJobsNotebookTaskDTO notebookTask) {
        this.notebookTask = notebookTask;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retryOnTimeout")
    public Boolean retryOnTimeout;

    public DTOJobsJobSettingsDTO withRetryOnTimeout(Boolean retryOnTimeout) {
        this.retryOnTimeout = retryOnTimeout;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schedule")
    public DTOJobsCronScheduleDTO schedule;

    public DTOJobsJobSettingsDTO withSchedule(DTOJobsCronScheduleDTO schedule) {
        this.schedule = schedule;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparkJarTask")
    public DTOJobsSparkJarTaskDTO sparkJarTask;

    public DTOJobsJobSettingsDTO withSparkJarTask(DTOJobsSparkJarTaskDTO sparkJarTask) {
        this.sparkJarTask = sparkJarTask;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparkPythonTask")
    public DTOJobsSparkPythonTaskDTO sparkPythonTask;

    public DTOJobsJobSettingsDTO withSparkPythonTask(DTOJobsSparkPythonTaskDTO sparkPythonTask) {
        this.sparkPythonTask = sparkPythonTask;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sparkSubmitTask")
    public DTOJobsSparkSubmitTaskDTO sparkSubmitTask;

    public DTOJobsJobSettingsDTO withSparkSubmitTask(DTOJobsSparkSubmitTaskDTO sparkSubmitTask) {
        this.sparkSubmitTask = sparkSubmitTask;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timeoutSeconds")
    public Long timeoutSeconds;

    public DTOJobsJobSettingsDTO withTimeoutSeconds(Long timeoutSeconds) {
        this.timeoutSeconds = timeoutSeconds;
        return this;
    }
    
    public DTOJobsJobSettingsDTO(){}
}
