/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package ai.whylabs.WhyLabs;

import ai.whylabs.WhyLabs.utils.HTTPClient;
import ai.whylabs.WhyLabs.utils.SpeakeasyHTTPClient;

/**
 * WhyLabs Songbird: WhyLabs API that enables end-to-end AI observability
 */
public class Songbird {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "https://api.whylabsapp.com",
	};
  	
    public Account account;
    public Admin admin;
    public ApiKey apiKey;
    public Databricks databricks;
    public DatasetMetadata datasetMetadata;
    public DatasetProfile datasetProfile;
    public DebugEvents debugEvents;
    public FeatureWeights featureWeights;
    public FeatureFlags featureFlags;
    public Internal internal;
    public Log log;
    public Membership membership;
    public Models models;
    public Monitor monitor;
    public NotificationSettings notificationSettings;
    public Organizations organizations;
    public Payment payment;
    public Provision provision;
    public Schema schema;
    public Search search;
    public Sessions sessions;
    public User user;	

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = ai.whylabs.WhyLabs.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public Songbird build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new Songbird(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private Songbird(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
		
		this.account = new Account(this.sdkConfiguration);
		
		this.admin = new Admin(this.sdkConfiguration);
		
		this.apiKey = new ApiKey(this.sdkConfiguration);
		
		this.databricks = new Databricks(this.sdkConfiguration);
		
		this.datasetMetadata = new DatasetMetadata(this.sdkConfiguration);
		
		this.datasetProfile = new DatasetProfile(this.sdkConfiguration);
		
		this.debugEvents = new DebugEvents(this.sdkConfiguration);
		
		this.featureWeights = new FeatureWeights(this.sdkConfiguration);
		
		this.featureFlags = new FeatureFlags(this.sdkConfiguration);
		
		this.internal = new Internal(this.sdkConfiguration);
		
		this.log = new Log(this.sdkConfiguration);
		
		this.membership = new Membership(this.sdkConfiguration);
		
		this.models = new Models(this.sdkConfiguration);
		
		this.monitor = new Monitor(this.sdkConfiguration);
		
		this.notificationSettings = new NotificationSettings(this.sdkConfiguration);
		
		this.organizations = new Organizations(this.sdkConfiguration);
		
		this.payment = new Payment(this.sdkConfiguration);
		
		this.provision = new Provision(this.sdkConfiguration);
		
		this.schema = new Schema(this.sdkConfiguration);
		
		this.search = new Search(this.sdkConfiguration);
		
		this.sessions = new Sessions(this.sdkConfiguration);
		
		this.user = new User(this.sdkConfiguration);
	}
}